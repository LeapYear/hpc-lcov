version: 2.1

aliases:
  - &param_stack_yaml
    stack_yaml:
      type: string
      default: stack.yaml
  - &param_latest
    latest:
      type: boolean
      default: false

  - &cache_key
    v0-{{ checksum "cache-key.txt" }}

  - &step_build_cache_key
    run:
      name: Build cache key
      command: |
        FILES=(
          "${STACK_YAML}"
          package.yaml
        )
        echo "${STACK_YAML}" > cache-key.txt
        cat "${FILES[@]}" >> cache-key.txt
        curl -sSL https://get.haskellstack.org/ | sed -n 's/^STACK_VERSION="\(.*\)"/\1/p' >> cache-key.txt
  - &step_install_stack
    run:
      name: Install stack
      command: |
        curl -sSL https://get.haskellstack.org/ | sh
        stack --version

executors:
  centos7:
    parameters:
      <<: [*param_stack_yaml, *param_latest]

    docker:
      - image: centos:7
    working_directory: /root/src
    shell: /bin/bash -eux -o pipefail
    environment:
      STACK_YAML: << parameters.stack_yaml >>
      CI_LATEST: <<# parameters.latest >>1<</ parameters.latest >>
      LANG: en_US.UTF-8
      COVERAGE_DIR: /root/coverage/

orbs:
  codecov: codecov/codecov@1.0.2

jobs:
  run_build_and_test:
    parameters:
      <<: [*param_stack_yaml, *param_latest]

    executor:
      name: centos7
      stack_yaml: << parameters.stack_yaml >>
      latest: << parameters.latest >>

    steps:
      # init
      - checkout
      - *step_build_cache_key

      # install stack and dependencies
      - *step_install_stack
      - restore_cache:
          key: *cache_key
      - run:
          name: Build external dependencies
          command: stack build --test --only-dependencies
      - save_cache:
          key: *cache_key
          paths:
            - ~/.stack
            - .stack-work

      # Run full build and test
      - run:
          name: Build and test hpc-lcov
          command: |
            STACK_ARGS=(
              --ghc-options -Werror
              --copy-bins
              --local-bin-path /usr/local/bin
            )

            if [[ -n "${CI_LATEST}" ]]; then
                STACK_ARGS+=(--coverage)
            fi

            # tasty-discover-3.0.2 does not discover all modules by default, but this
            # flag is deprecated in newer versions
            if [[ "${STACK_YAML}" == "stack-ghc-8.0.yaml" ]]; then
              STACK_ARGS+=(--ghc-options '-optF --no-module-suffix')
            fi

            stack test "${STACK_ARGS[@]}"
            mv /usr/local/bin/hpc-lcov /usr/local/bin/hpc-lcov-coverage-enabled

      # build and install without coverage
      # so that we can dog-food the project and use it to collect coverage
      # reports for this project. Should not be built with coverage because
      # we don't want to generate a hpc-lcov.tix file
      - run:
          name: Build and install without coverage
          command: |
            # avoid rewriting .mix files and such
            cp -r .stack-work .stack-work-with-coverage
            stack install --ghc-options -Werror --local-bin-path /usr/local/bin
            rm -rf .stack-work
            mv .stack-work-with-coverage .stack-work

      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Convert coverage output
                command: hpc-lcov -o lcov-test.info
            - codecov/upload:
                file: lcov-test.info

      # test minimal-example
      - run:
          name: Prep minimal-example test
          command: cp "${STACK_YAML}" minimal-example/
      - run:
          name: Test minimal-example
          command: |
            stack test --coverage
            hpc-lcov -o actual-lcov.info
            diff -L expected lcov.info -L actual actual-lcov.info --unified
          working_directory: /root/src/minimal-example

      # Test hpc-lcov executable
      - run:
          name: Test hpc-lcov executable on minimal-example
          command: ../.circleci/test-hpc-lcov.sh /usr/local/bin/hpc-lcov-coverage-enabled "${COVERAGE_DIR}"
          working_directory: /root/src/minimal-example
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Convert coverage output
                command: |
                  yum install -y epel-release
                  yum install -y lcov

                  LCOV_ARGS=()
                  for TIX_FILE in "${COVERAGE_DIR}"/*.tix; do
                    LCOV_FILE="${COVERAGE_DIR}/$(basename "${TIX_FILE}" tix).info"
                    hpc-lcov -f "${TIX_FILE}" --main-package hpc-lcov -o "${LCOV_FILE}"
                    LCOV_ARGS+=(-a "${LCOV_FILE}")
                  done

                  lcov "${LCOV_ARGS[@]}" > lcov-exe.info
            - codecov/upload:
                file: lcov-exe.info

  run_lint:
    executor: centos7

    steps:
      # init
      - checkout
      - *step_build_cache_key

      # install stack and dependencies
      - *step_install_stack
      - restore_cache:
          key: *cache_key
      - run:
          name: Build external dependencies
          command: stack build hlint stylish-haskell

      # lint
      - run:
          name: Lint
          command: |
            set +e
            STATUS=0
            scripts/hlint.sh || STATUS=1
            scripts/stylish-haskell.sh || STATUS=1
            exit "${STATUS}"

  run_haddock:
    executor: centos7

    steps:
      # init
      - checkout
      - *step_build_cache_key
      - run: echo haddock >> cache-key.txt

      # install stack and dependencies
      - *step_install_stack
      - restore_cache:
          key: *cache_key
      - run:
          name: Build external dependencies
          command: stack build --test --only-dependencies --haddock
      - save_cache:
          key: *cache_key
          paths:
            - ~/.stack
            - .stack-work

      # haddock
      - run:
          name: Build haddock
          command: stack build --ghc-options -Werror --haddock
      - run:
          name: Collect haddock
          command: |
            mkdir -p .ci/
            tar czf .ci/haddock-docs.tar.gz -C "$(find .stack-work/dist -regex '.*/doc/html/[^/]*')" .
      - store_artifacts:
          path: .ci/

workflows:
  version: 2

  build_and_test:
    jobs:
      - run_build_and_test:
          name: test_latest
          latest: true
      - run_build_and_test:
          name: test_ghc_8.8
          stack_yaml: stack-ghc-8.8.yaml
      - run_build_and_test:
          name: test_ghc_8.6
          stack_yaml: stack-ghc-8.6.yaml
      - run_build_and_test:
          name: test_ghc_8.4
          stack_yaml: stack-ghc-8.4.yaml
      - run_build_and_test:
          name: test_ghc_8.2
          stack_yaml: stack-ghc-8.2.yaml
      - run_build_and_test:
          name: test_ghc_8.0
          stack_yaml: stack-ghc-8.0.yaml
      - run_lint
      - run_haddock
